#!/usr/bin/python3
# -*- coding: utf-8 -*-
import datetime

"""
此代码单独执行，手动获取打印输出添加到Excel表中更为方便，后期不再使用
"""


class Code2Excel:
    def __init__(self):
        self.YEAR_START = 1900
        self.MONTH_START = 1
        self.DAY_START = 31
        self.YEAR_END = 2100
        # 阴历各年编码表
        self.lunarYearCode = [
            0X4BD8,  # 1900
            0X4AE0, 0XA570, 0X54D5, 0XD260, 0XD950, 0X5554, 0X56AF, 0X9AD0, 0X55D2, 0X4AE0,  # 1910
            0XA5B6, 0XA4D0, 0XD250, 0XD295, 0XB54F, 0XD6A0, 0XADA2, 0X95B0, 0X4977, 0X497F,  # 1920
            0XA4B0, 0XB4B5, 0X6A50, 0X6D40, 0XAB54, 0X2B6F, 0X9570, 0X52F2, 0X4970, 0X6566,  # 1930
            0XD4A0, 0XEA50, 0X6A95, 0X5ADF, 0X2B60, 0X86E3, 0X92EF, 0XC8D7, 0XC95F, 0XD4A0,  # 1940
            0XD8A6, 0XB55F, 0X56A0, 0XA5B4, 0X25DF, 0X92D0, 0XD2B2, 0XA950, 0XB557, 0X6CA0,  # 1950
            0XB550, 0X5355, 0X4DAF, 0XA5B0, 0X4573, 0X52BF, 0XA9A8, 0XE950, 0X6AA0, 0XAEA6,  # 1960
            0XAB50, 0X4B60, 0XAAE4, 0XA570, 0X5260, 0XF263, 0XD950, 0X5B57, 0X56A0, 0X96D0,  # 1970
            0X4DD5, 0X4AD0, 0XA4D0, 0XD4D4, 0XD250, 0XD558, 0XB540, 0XB6A0, 0X95A6, 0X95BF,  # 1980
            0X49B0, 0XA974, 0XA4B0, 0XB27A, 0X6A50, 0X6D40, 0XAF46, 0XAB60, 0X9570, 0X4AF5,  # 1990
            0X4970, 0X64B0, 0X74A3, 0XEA50, 0X6B58, 0X5AC0, 0XAB60, 0X96D5, 0X92E0, 0XC960,  # 2000
            0XD954, 0XD4A0, 0XDA50, 0X7552, 0X56A0, 0XABB7, 0X25D0, 0X92D0, 0XCAB5, 0XA950,  # 2010
            0XB4A0, 0XBAA4, 0XAD50, 0X55D9, 0X4BA0, 0XA5B0, 0X5176, 0X52BF, 0XA930, 0X7954,  # 2020
            0X6AA0, 0XAD50, 0X5B52, 0X4B60, 0XA6E6, 0XA4E0, 0XD260, 0XEA65, 0XD530, 0X5AA0,  # 2030
            0X76A3, 0X96D0, 0X4AFB, 0X4AD0, 0XA4D0, 0XD0B6, 0XD25F, 0XD520, 0XDD45, 0XB5A0,  # 2040
            0X56D0, 0X55B2, 0X49B0, 0XA577, 0XA4B0, 0XAA50, 0XB255, 0X6D2F, 0XADA0, 0X4B63,  # 2050
            0X937F, 0X49F8, 0X4970, 0X64B0, 0X68A6, 0XEA5F, 0X6B20, 0XA6C4, 0XAAEF, 0X92E0,  # 2060
            0XD2E3, 0XC960, 0XD557, 0XD4A0, 0XDA50, 0X5D55, 0X56A0, 0XA6D0, 0X55D4, 0X52D0,  # 2070
            0XA9B8, 0XA950, 0XB4A0, 0XB6A6, 0XAD50, 0X55A0, 0XABA4, 0XA5B0, 0X52B0, 0XB273,  # 2080
            0X6930, 0X7337, 0X6AA0, 0XAD50, 0X4B55, 0X4B6F, 0XA570, 0X54E4, 0XD260, 0XE968,  # 2090
            0XD520, 0XDAA0, 0X6AA6, 0X56DF, 0X4AE0, 0XA9D4, 0XA4D0, 0XD150, 0XF252, 0XD520]  # 2100
        self.lunarYearCode_bin = [
            # 前12个bit，依次表示1-12月份的大小月，1为大月30天，0为小月29天
            # 后4bit分为两种情况：
            # 1、闰月的月份（如1000，二进制转为十进制为8，表示该年闰八月）
            # 2、前一年闰月的大小月标志（二进制0000表示闰小月，二进制1111表示闰大月）
            # 闰月大小月与当前年份不在一起，而是在下一年的数据中，但不会产生冲突，是因为相邻两年，不可能同为闰月年。
            # 记录农历年1900-2100年的闰月和大小月情况
            '0100101111011000',  # 1900
            '0100101011100000', '1010010101110000', '0101010011010101', '1101001001100000', '1101100101010000', '0101010101010100', '0101011010101111', '1001101011010000', '0101010111010010', '0100101011100000',
            '1010010110110110', '1010010011010000', '1101001001010000', '1101001010010101', '1011010101001111', '1101011010100000', '1010110110100010', '1001010110110000', '0100100101110111', '0100100101111111',
            '1010010010110000', '1011010010110101', '0110101001010000', '0110110101000000', '1010101101010100', '0010101101101111', '1001010101110000', '0101001011110010', '0100100101110000', '0110010101100110',
            '1101010010100000', '1110101001010000', '0110101010010101', '0101101011011111', '0010101101100000', '1000011011100011', '1001001011101111', '1100100011010111', '1100100101011111', '1101010010100000',
            '1101100010100110', '1011010101011111', '0101011010100000', '1010010110110100', '0010010111011111', '1001001011010000', '1101001010110010', '1010100101010000', '1011010101010111', '0110110010100000',
            '1011010101010000', '0101001101010101', '0100110110101111', '1010010110110000', '0100010101110011', '0101001010111111', '1010100110101000', '1110100101010000', '0110101010100000', '1010111010100110',
            '1010101101010000', '0100101101100000', '1010101011100100', '1010010101110000', '0101001001100000', '1111001001100011', '1101100101010000', '0101101101010111', '0101011010100000', '1001011011010000',
            '0100110111010101', '0100101011010000', '1010010011010000', '1101010011010100', '1101001001010000', '1101010101011000', '1011010101000000', '1011011010100000', '1001010110100110', '1001010110111111',
            '0100100110110000', '1010100101110100', '1010010010110000', '1011001001111010', '0110101001010000', '0110110101000000', '1010111101000110', '1010101101100000', '1001010101110000', '0100101011110101',
            '0100100101110000', '0110010010110000', '0111010010100011', '1110101001010000', '0110101101011000', '0101101011000000', '1010101101100000', '1001011011010101', '1001001011100000', '1100100101100000',
            '1101100101010100', '1101010010100000', '1101101001010000', '0111010101010010', '0101011010100000', '1010101110110111', '0010010111010000', '1001001011010000', '1100101010110101', '1010100101010000',
            '1011010010100000', '1011101010100100', '1010110101010000', '0101010111011001', '0100101110100000', '1010010110110000', '0101000101110110', '0101001010111111', '1010100100110000', '0111100101010100',
            '0110101010100000', '1010110101010000', '0101101101010010', '0100101101100000', '1010011011100110', '1010010011100000', '1101001001100000', '1110101001100101', '1101010100110000', '0101101010100000',
            '0111011010100011', '1001011011010000', '0100101011111011', '0100101011010000', '1010010011010000', '1101000010110110', '1101001001011111', '1101010100100000', '1101110101000101', '1011010110100000',
            '0101011011010000', '0101010110110010', '0100100110110000', '1010010101110111', '1010010010110000', '1010101001010000', '1011001001010101', '0110110100101111', '1010110110100000', '0100101101100011',
            '1001001101111111', '0100100111111000', '0100100101110000', '0110010010110000', '0110100010100110', '1110101001011111', '0110101100100000', '1010011011000100', '1010101011101111', '1001001011100000',
            '1101001011100011', '1100100101100000', '1101010101010111', '1101010010100000', '1101101001010000', '0101110101010101', '0101011010100000', '1010011011010000', '0101010111010100', '0101001011010000',
            '1010100110111000', '1010100101010000', '1011010010100000', '1011011010100110', '1010110101010000', '0101010110100000', '1010101110100100', '1010010110110000', '0101001010110000', '1011001001110011',
            '0110100100110000', '0111001100110111', '0110101010100000', '1010110101010000', '0100101101010101', '0100101101101111', '1010010101110000', '0101010011100100', '1101001001100000', '1110100101101000',
            '1101010100100000', '1101101010100000', '0110101010100110', '0101011011011111', '0100101011100000', '1010100111010100', '1010010011010000', '1101000101010000', '1111001001010010', '1101010100100000']  # 2100

    def parsecode(self):
        # # 把八进制编码转化为二进制编码
        # lunarYearCode_bin = []
        # for year in self.lunarYearCode:
        #     lunarYearCode_bin.append(str(bin(year).lstrip('0b')).zfill(16))
        # print(lunarYearCode_bin)
        # 计算每年每月天数
        for year in self.lunarYearCode_bin:
            pass
        # 计算闰月
        # 计算每一阴历年在阳历的起始日
        lunar_eachYearStartDate = []
        for i in range(0, len(self.lunarYearCode)):
            lunar_eachYearStartDate.append(i)
        lunar_eachYearStartDate[0] = datetime.datetime(self.YEAR_START, self.MONTH_START, self.DAY_START)  # 阴历1900年起始日期1.31
        for i in range(0, len(self.lunarYearCode) - 1):  # 循环计算每年的阴历起始日期
            lunar_yearDays = self.getLunarDay(self.YEAR_START + i, 12)
            lunar_eachYearStartDate[i + 1] = lunar_eachYearStartDate[i] + datetime.timedelta(days=lunar_yearDays)

    def getLunarDay(self, lunar_year, lunar_month):
        # 输入：年数，月数
        # 输出：此年从正月到指定月的阴历总天数，包括小于等于指定月的闰月天数
        mask = 0X8000  # mask永远只有1位是1，先判断第1月
        i = 1
        lunar_year_days = 0
        # 正常月总天数
        while (i <= lunar_month) and (mask > 0x8):
            lunar_year_days += self.__getLunarMonthDay(lunar_year, mask)
            mask //= 2
            i += 1
        # 闰月及其天数
        leapMonth = self.__getLeapMonth(lunar_year)
        if 0 < leapMonth <= lunar_month:
            leapMonthDays = self.__getLeapMonthDay(lunar_year)
            lunar_year_days += leapMonthDays
        else:
            pass
        return lunar_year_days

    def __getLeapMonth(self, lunar_year):
        # 输入：年数
        # 输出：此年的阴历闰月数
        leapMonth = (self.lunarYearCode[lunar_year - self.YEAR_START] & 0XF)
        if leapMonth == 0XF or leapMonth == 0XF:  # 1111和0000表明此年无闰月
            return 0
        else:
            return leapMonth  # 其他编码返回闰月数

    def __getLunarMonthDay(self, lunar_year, mask):
        # 输入：年数，阴历各年编码表的月解析码
        # 输出：月解析码对应的月份天数
        if (self.lunarYearCode[lunar_year - self.YEAR_START] & mask) == mask:  # 匹配对应位
            return 30
        else:
            return 29

    def __getLeapMonthDay(self, lunar_year):
        # 输入：年数
        # 输出：此年的阴历闰月天数
        if (self.lunarYearCode[lunar_year - self.YEAR_START + 1] & 0XF) == 0XF:  # 大月编码值
            return 30
        elif (self.lunarYearCode[lunar_year - self.YEAR_START + 1] & 0XF) == 0X0:  # 小月编码值
            return 29
        else:
            return 0  # 其他编码值表示不是闰月


if __name__ == '__main__':
    #c = Code2Excel()
    #c.parsecode()
    pass
